# -*- coding: utf-8 -*-
"""
Date: Thu Sep 21 14:56:38 2023
File Name: gene_exploration.py
Author: Mirjam Karlsson-MÃ¼ller

Description:
    To find out what genes we want the pipeline to run for, we want to know which of the ca. 19000
    genes we have gene expression values of, we can find variants for.
    
List of Functions:
    
Procedure: 
    1.
    2.
    3.
    
Useage:
    
    
Possible Bugs:
"""


#%% 0.0 Imports
import argparse
import re
import time

#%% 0.1 Argparse

"0. Setting up argparse, handling input parameters"

parser = argparse.ArgumentParser(prog='explore gene variants',
                                 usage='%(prog)s -s INPUT-PATHS -o OUTPUT -r GENE-RANGES',
                                 description="""Creates a location of variants table out of
                                 several samples. Containing location x sample.""")

parser.add_argument('--samples', '-s', required=True,
                    help='file containing the paths to the vcf files.')
parser.add_argument('--out', '-o', required=True,
                    help="""Output file, genes with variant passing filtering""")
parser.add_argument('--ranges', '-r', required=True,
                    help="Gene ranges table. Generated by gene_ranges.py")

args = parser.parse_args()

#%% 0.2 Functions

#%% 0.3 Start Timer

start_time=time.time()


#%% 1. Read in gene ranges file. Make dictionary with all genes and ranges!

chromosomes=["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","X", "Y", "M"]
genes=dict()

with open(args.ranges, "r") as ranges:
    for line in ranges:
        if line.startswith("chrom"):
            continue
        #chrom\tstart\tstop\tgene\tscore\tstrand\n
        gene_chrom, gene_start, gene_stop, gene, score, gene_strand=line.strip("\n").split("\t")
        gene_start=int(gene_start)
        gene_stop=int(gene_stop)
        chrom_index=chromosomes.index(gene_chrom.strip("chr"))
        genes[gene]=[gene_chrom, gene_start, gene_stop]

print("gene ranges read. ")

#%% 2. Read in vcf file list

#Read vcf file list off the input file
vcf_file_list=[]

with open(args.samples, "r") as vcf:
    for line in vcf:
        vcf_file_list.append(line.strip("\n"))

print("vcf file list read.")
#%% 3. Go through genes and vcfs.

#To write genes out immediately
out=open(args.out, "w")
counter=1

for gene in genes:
    print(gene, counter)
    counter+=1
    variant_found=False
    for file in vcf_file_list:
        if variant_found==True:
            print("breaking ", gene)
            break
        with open(file, "r") as vcf:
            for line in vcf:
                #Skip headers
                if line.startswith("#"):
                    continue
                chrom, position, ID, ref, alt, qual, filt, info, form, sample =line.split("\t")
                genotype=sample.split(":")[-7].strip(" ")
                
                #We transform position to 0-based, because thats what everything else in the pipeline has
                #and python as well
                position=str(int(position)-1)
                #We only want single point mutations
                if len(alt)>1 or len(ref)>1:
                    continue
                #Check if inside gene range. we can assume that the chromosomes at least are sorted by appearance. Which means if we are at a chromosome after the one we look for, 
                #we can stop reading the file.
                if chrom != genes[gene][0]:
                    #Theres names given to parts where we arent sure what chromosomes they belong to. Those wont be in the list.
                    #But we also dont want them. So we skip those too.
                    if chrom.strip("chr") not in chromosomes:
                        continue
                    else:
                        if chrom_index<chromosomes.index(chrom.strip("chr")):
                            break
                        else:
                            continue
                    
                else:
                    if int(position)< genes[gene][1]:
                        continue
                    elif int(position)> genes[gene][2]:
                        #print(position)
                        break
                
                "Now filter the entries."
                #Keep values with MSI<7
                if re.search(r"MSI=(\d+);", info):
                    if int(re.search(r"MSI=(\d+);", info).group(1))>=7:
                        continue
                else:
                    continue
                
                #print("line 104")
                #Keep values with HMPOL<6
                if re.search(r"HMPOL=(\d+);", info):
                    if int(re.search(r"HMPOL=(\d+);", info).group(1))>=6:
                        continue
                else:
                    continue
                
                #print("line 111")
                #Keep entries with GC_cont < 78%
                if re.search(r"GC_CONT=(0\.\d+);", info):
                    if float(re.search(r"GC_CONT=(0\.\d+);", info).group(1))>=0.78:
                        continue
                else:
                    continue
                
                #print("line 118")
                #Keep variant depth >=5
                if re.search(r"VD=(\d+);", info):
                    if int(re.search(r"VD=(\d+);", info).group(1))<5:
                        continue
                else:
                    continue
                
                #print("line 125")
                #Is a flag, so it will only be there if it applies.
                if re.search(r"low_complexity_region", info):
                    continue
                
                #print("line 129")
                #6th column, filter bad quality reads.
                if qual=="." or float(qual)<55:
                    continue
                #print("line 133")
                
                if re.search(r"ucsc_rep=([a-z]+);", info):
                    #if re.search(r"ucsc_rep=([a-z]+);", info).group(1)=="segdup":
                    continue
    
                #If we made it here, then the variant passed filtering for this sample.
                variant_found=True
                print("variant found.", gene)
                out.write(gene+"\n")
                break




out.close()

#%% Stop Timer

print("Run time: {:.2f} seconds.".format(time.time()-start_time))   